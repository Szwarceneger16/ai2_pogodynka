security:
  encoders:
    App\Security\User:
      algorithm: auto
    Symfony\Component\Security\Core\User\User:
      algorithm: auto

  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    #        app_user_provider:
    #            id: App\Security\UserProvider
    backend_users:
      memory:
        users:
          admin: { password: '$argon2id$v=19$m=65536,t=4,p=1$ZHZZai5idmhWSW5GeVZuTw$paTv67NFqko+oGzSpwF2v13u1FGp7QzWLYA8ymecVSU', roles: [ 'ROLE_MODERATOR' ] }
          super_admin: { password: '$argon2id$v=19$m=65536,t=4,p=1$ZHZZai5idmhWSW5GeVZuTw$paTv67NFqko+oGzSpwF2v13u1FGp7QzWLYA8ymecVSU', roles: [ 'ROLE_ADMIN' ] }
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      anonymous: lazy
      #provider: app_user_provider
      provider: backend_users
      http_basic: #
        realm: My Secured Area #
      guard:
        authenticators:
          - App\Security\AppAuthenticator
      form_login:
        login_path: app_login
      logout:
        path: app_logout
        # where to redirect after logout
        # target: app_any_route

        # where to redirect after logout
        # target: app_any_route

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#firewalls-authentication

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/admin, roles: ROLE_ADMIN }
  # - { path: ^/profile, roles: ROLE_USER }
  role_hierarchy:
    ROLE_USER: [ ROLE_MEASURMENTS,ROLE_LOCATIONS ]
    ROLE_MODERATOR: [ ROLE_USER,ROLE_ADD,ROLE_EDIT ]
    ROLE_ADMIN: [ ROLE_MODERATOR,ROLE_DELETE ]